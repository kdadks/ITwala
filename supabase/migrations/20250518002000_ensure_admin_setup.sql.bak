-- First ensure the admin user exists in auth.users
DO $$
DECLARE
    user_id uuid;
BEGIN
    SELECT id INTO user_id FROM auth.users WHERE email = 'admin@itwala.com';
    
    IF user_id IS NULL THEN
        -- Create admin user if doesn't exist
        INSERT INTO auth.users (email, encrypted_password, email_confirmed_at, raw_user_meta_data, raw_app_meta_data)
        VALUES (
            'admin@itwala.com',
            crypt('Admin@123', gen_salt('bf')),
            now(),
            '{"role":"admin","full_name":"Admin User"}'::jsonb,
            '{}'::jsonb
        )
        RETURNING id INTO user_id;
    ELSE
        -- Update existing admin user metadata
        UPDATE auth.users
        SET raw_user_meta_data = jsonb_set(
            COALESCE(raw_user_meta_data, '{}'::jsonb),
            '{role}',
            '"admin"'
        )
        WHERE id = user_id;
    END IF;

    -- Ensure profile exists for admin
    INSERT INTO public.profiles (id, email, role, full_name, created_at)
    VALUES (
        user_id,
        'admin@itwala.com',
        'admin',
        'Admin User',
        now()
    )
    ON CONFLICT (id) DO UPDATE
    SET role = 'admin',
        email = 'admin@itwala.com',
        full_name = 'Admin User';

    -- Update RLS policies to allow admin access
    DROP POLICY IF EXISTS "Users can view their own profile" ON public.profiles;
    DROP POLICY IF EXISTS "Users can update their own profile" ON public.profiles;
    DROP POLICY IF EXISTS "Public profiles are viewable by everyone" ON public.profiles;
    DROP POLICY IF EXISTS "Admins have full access" ON public.profiles;

    -- Re-create policies
    CREATE POLICY "Public profiles are viewable by everyone"
        ON public.profiles FOR SELECT
        USING (true);

    CREATE POLICY "Users can update their own profile"
        ON public.profiles FOR UPDATE
        USING (auth.uid() = id);

    -- Create admin-specific policy that grants full access
    CREATE POLICY "Admins have full access"
        ON public.profiles FOR ALL
        USING (
            EXISTS (
                SELECT 1 FROM auth.users
                WHERE auth.uid() = profiles.id
                AND (
                    raw_user_meta_data->>'role' = 'admin'
                    OR EXISTS (
                        SELECT 1 FROM profiles p2
                        WHERE p2.id = auth.uid()
                        AND p2.role = 'admin'
                    )
                )
            )
        );
END $$;
